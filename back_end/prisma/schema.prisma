generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Medecin {
  id          Int       @id @default(autoincrement())
  nom         String
  specialite  String?

  patients    Patient[]

  created_at  DateTime  @default(now())
  updated_at  DateTime  @updatedAt
}

model TypeIdentite {
  id          Int      @id @default(autoincrement())
  nom         String   @unique
  description String?

  patients    Patient[]

  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt
}

model DocumentParametrage {
  id          Int      @id @default(autoincrement())
  nom         String   @unique
  description String?

  documents   DocumentPatient[]

  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt
}

model Patient {
  id                    Int       @id @default(autoincrement())
  prenom                String
  nom                   String
  date_naissance        DateTime
  sexe                  String
  type_identite_id      Int?
  identifiant           String?
  type_identite         TypeIdentite? @relation(fields: [type_identite_id], references: [id], onDelete: SetNull)
  photo_profil          String?

  telephone             String?
  email                 String?
  adresse               String?

  nom_utilisateur       String?   @unique
  mot_de_passe          String?

  groupe_sanguin        String?
  niveau_autonomie      String?
  taille_cm             Int?
  poids_kg              Int?
  statut_tabac          String?
  consommation_alcool   String?

  assurance             String?
  numero_police         String?
  numero_dossier        String?   @unique
  medecin_id            Int?
  medecin               Medecin?  @relation(fields: [medecin_id], references: [id], onDelete: SetNull)

  statuts               String?
  service               String?
  priorite              String?
  dernier_visite        DateTime?

  etat_civil            String?
  profession            String?
  langue_preferee       String?
  consentement          Boolean   @default(false)

  date_creation         DateTime  @default(now())
  created_at            DateTime  @default(now())
  updated_at            DateTime  @updatedAt

  contacts_urgence      ContactUrgence[]
  documents_patient     DocumentPatient[]
  historiques           HistoriquePatient[]

  allergies             PatientAllergie[]
  pathologies           PatientPathologie[]
  antecedents           PatientAntecedentMedical[]
}

model ContactUrgence {
  id           Int     @id @default(autoincrement())
  patient_id   Int
  nom_complet  String
  relation     String?
  telephone    String

  patient      Patient @relation(fields: [patient_id], references: [id], onDelete: Cascade)

  created_at   DateTime  @default(now())
  updated_at   DateTime  @updatedAt
}

model DocumentPatient {
  id                      Int     @id @default(autoincrement())
  patient_id              Int
  document_parametrage_id Int
  nom_fichier             String?
  url                     String?
  date_upload             DateTime @default(now())

  patient                 Patient @relation(fields: [patient_id], references: [id], onDelete: Cascade)
  type                    DocumentParametrage @relation(fields: [document_parametrage_id], references: [id])

  created_at              DateTime @default(now())
  updated_at              DateTime @updatedAt
}

model HistoriquePatient {
  id              Int      @id @default(autoincrement())
  patient_id      Int
  attribut        String
  ancienne_valeur String?
  nouvelle_valeur String?
  modifie_le      DateTime  @default(now())
  modifie_par     String?

  patient         Patient   @relation(fields: [patient_id], references: [id], onDelete: Cascade)

  created_at      DateTime @default(now())
  updated_at      DateTime @updatedAt
}

model Allergie {
  id         Int       @id @default(autoincrement())
  nom        String    @unique
  patients   PatientAllergie[]

  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt
}

model PatientAllergie {
  patient_id   Int
  allergie_id  Int
  patient      Patient  @relation(fields: [patient_id], references: [id], onDelete: Cascade)
  allergie     Allergie @relation(fields: [allergie_id], references: [id], onDelete: Cascade)

  @@id([patient_id, allergie_id])
}

model PathologieChronique {
  id         Int       @id @default(autoincrement())
  nom        String    @unique
  patients   PatientPathologie[]

  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt
}

model PatientPathologie {
  patient_id     Int
  pathologie_id  Int
  patient        Patient             @relation(fields: [patient_id], references: [id], onDelete: Cascade)
  pathologie     PathologieChronique @relation(fields: [pathologie_id], references: [id], onDelete: Cascade)

  @@id([patient_id, pathologie_id])
}

model AntecedentMedical {
  id         Int       @id @default(autoincrement())
  nom        String    @unique
  patients   PatientAntecedentMedical[]

  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt
}

model PatientAntecedentMedical {
  patient_id     Int
  antecedent_id  Int
  patient        Patient           @relation(fields: [patient_id], references: [id], onDelete: Cascade)
  antecedent     AntecedentMedical @relation(fields: [antecedent_id], references: [id], onDelete: Cascade)

  @@id([patient_id, antecedent_id])
}

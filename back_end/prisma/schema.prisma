generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Medecin {
  id              Int     @id @default(autoincrement())
  prenom          String
  nom             String
  sexe            String
  matricule       String  @unique
  specialite      String?
  email           String? @unique
  telephone       String?
  photo_profil    String?
  langue_preferee String?
  statut          String // "Actif", "Suspendu", "Inactif"
  bio             String?
  role            String? // "Médecin", "Chef", "Consultant"

  serviceId Int?
  service   Service? @relation(fields: [serviceId], references: [id])

  created_at      DateTime          @default(now())
  updated_at      DateTime          @updatedAt
  Patient         Patient[]
  ExamenMedical   ExamenMedical[]
  PointageMedecin PointageMedecin[]
  RendezVous      RendezVous[]
}

model RendezVous {
  id        Int      @id @default(autoincrement())
  patientId Int
  medecinId Int
  date      DateTime
  statut    String // "prévu", "en cours", "terminé", "annulé"
  motif     String?

  patient Patient @relation(fields: [patientId], references: [id], onDelete: Cascade)
  medecin Medecin @relation(fields: [medecinId], references: [id], onDelete: Cascade)

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}

model Patient {
  id               Int      @id @default(autoincrement())
  prenom           String
  nom              String
  date_naissance   DateTime
  sexe             String
  type_identifiant String
  identifiant      String
  photo_profil     String?

  telephone String?
  email     String?
  adresse   String?

  groupe_sanguin      String?
  niveau_autonomie    String?
  taille_cm           Int?
  poids_kg            Int?
  statut_tabac        String?
  consommation_alcool String?

  statuts        String?
  service        String?
  priorite       String?
  dernier_visite DateTime?

  etat_civil      String?
  profession      String?
  langue_preferee String?
  consentement    Boolean @default(false)

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  contacts_urgence  ContactUrgence[]
  documents_patient DocumentPatient[]
  historiques       HistoriquePatient[]
  allergies         Allergie[]
  pathologies       Pathologie[]
  antecedents       AntecedentMedical[]
  assurances        Assurance[]
  dossiers_medicaux DossierMedical[]
  credentials       Authentification?
  medecin           Medecin?            @relation(fields: [medecinId], references: [id])
  medecinId         Int?
  RendezVous        RendezVous[]
}

model Service {
  id          Int     @id @default(autoincrement())
  nom         String  @unique
  description String?

  medecins Medecin[]

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}

model ContactUrgence {
  id          Int     @id @default(autoincrement())
  patient_id  Int
  nom_complet String
  relation    String?
  telephone   String

  patient Patient @relation(fields: [patient_id], references: [id], onDelete: Cascade)

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}

model DocumentParams {
  id         Int      @id @default(autoincrement())
  nom        String   @unique
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}

model DocumentPatient {
  id          Int      @id @default(autoincrement())
  patient_id  Int
  nom_fichier String?
  url         String?
  date_upload DateTime @default(now())

  patient Patient @relation(fields: [patient_id], references: [id], onDelete: Cascade)
  type    String

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@index([patient_id])
}

model HistoriquePatient {
  id              Int      @id @default(autoincrement())
  patient_id      Int
  attribut        String
  ancienne_valeur String?
  nouvelle_valeur String?
  modifie_le      DateTime @default(now())
  modifie_par     String?

  patient Patient @relation(fields: [patient_id], references: [id], onDelete: Cascade)

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}

model AllergieParams {
  id         Int      @id @default(autoincrement())
  nom        String   @unique
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}

model Allergie {
  id         Int      @id @default(autoincrement())
  patient_id Int
  patient    Patient  @relation(fields: [patient_id], references: [id], onDelete: Cascade)
  allergie   String
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@unique([patient_id, allergie])
  @@index([patient_id])
}

model PathologieParams {
  id         Int      @id @default(autoincrement())
  nom        String   @unique
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}

model Pathologie {
  id         Int      @id @default(autoincrement())
  patient_id Int
  patient    Patient  @relation(fields: [patient_id], references: [id], onDelete: Cascade)
  pathologie String
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@unique([patient_id, pathologie])
  @@index([patient_id])
}

model AntecedentParams {
  id         Int      @id @default(autoincrement())
  nom        String   @unique
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}

model AntecedentMedical {
  id              Int       @id @default(autoincrement())
  patient_id      Int
  patient         Patient   @relation(fields: [patient_id], references: [id], onDelete: Cascade)
  antecedent      String
  antecedant_date DateTime?
  specialty       String?
  description     String?
  document1       String?
  document2       String?
  document3       String?
  document4       String?
  document5       String?
  created_at      DateTime  @default(now())
  updated_at      DateTime  @updatedAt

  @@index([patient_id])
}

model Assurance {
  id            Int      @id @default(autoincrement())
  patient_id    Int
  patient       Patient  @relation(fields: [patient_id], references: [id], onDelete: Cascade)
  assurance     String
  numero_police String
  created_at    DateTime @default(now())
  updated_at    DateTime @updatedAt
}

model Authentification {
  id              Int      @id @default(autoincrement())
  patient_id      Int      @unique
  patient         Patient  @relation(fields: [patient_id], references: [id], onDelete: Cascade)
  nom_utilisateur String
  mot_de_passe    String
  created_at      DateTime @default(now())
  updated_at      DateTime @updatedAt
}

model TypeIdentite {
  id          Int     @id @default(autoincrement())
  nom         String  @unique
  description String?

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}

model DossierMedical {
  id          Int      @id @default(autoincrement())
  patient_id  Int
  patient     Patient  @relation(fields: [patient_id], references: [id], onDelete: Cascade)
  date_visite DateTime
  notes       String?

  signesVitaux SigneVital[]
  medicaments  Medicament[]
  examens      ExamenMedical[]

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@index([patient_id])
}

model SigneVital {
  id         Int            @id @default(autoincrement())
  dossier_id Int
  dossier    DossierMedical @relation(fields: [dossier_id], references: [id], onDelete: Cascade)
  date       DateTime

  pression        String
  frequence_card  Int
  saturation_oxyg Int
  temperature     Float

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@index([dossier_id])
}

model Medicament {
  id         Int            @id @default(autoincrement())
  dossier_id Int
  dossier    DossierMedical @relation(fields: [dossier_id], references: [id], onDelete: Cascade)
  nom        String
  dosage     String
  frequence  String
  date_debut DateTime
  date_fin   DateTime?
  statut     String

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@index([dossier_id])
}

model ExamenMedical {
  id         Int            @id @default(autoincrement())
  dossier_id Int
  dossier    DossierMedical @relation(fields: [dossier_id], references: [id], onDelete: Cascade)

  titre    String
  date     DateTime
  statut   String // e.g., "Normal", "En attente"
  resultat String?

  medecin_id Int?
  medecin    Medecin? @relation(fields: [medecin_id], references: [id])

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@index([dossier_id])
}

model PointageMedecin {
  id        Int     @id @default(autoincrement())
  medecinId Int
  medecin   Medecin @relation(fields: [medecinId], references: [id], onDelete: Cascade)

  date  DateTime @default(now())
  heure String // e.g. "08:30", or could be stored as `DateTime` if needed
  type  String // "Entrée" | "Sortie" | "Pause" etc.

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@index([medecinId])
}
